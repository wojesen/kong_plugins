local print = print
local tconcat = table.concat
local tinsert = table.insert
local srep = string.rep
local tostring = tostring
local next = next

function print_r(root)
  local cache = {  [root] = "." }
  local function _dump(t,space,name)
    local temp = {}
    for k,v in pairs(t) do
      local key = tostring(k)
      if cache[v] then
        tinsert(temp,"+" .. key .. " {" .. cache[v].."}")
      elseif type(v) == "table" then
        local new_key = name .. "." .. key
        cache[v] = new_key
        tinsert(temp,"+" .. key .. _dump(v,space .. (next(t,k) and "|" or " " ).. srep(" ",#key),new_key))
      else
        tinsert(temp,"+" .. key .. " [" .. tostring(v).."]")
      end
    end
    return tconcat(temp,"\n"..space)
  end
  print(_dump(root, "",""))
end
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wangjinshan.
--- DateTime: 2020/08/14 16:21
---

local function test(ranges, value,matchType)
  if ranges and type(ranges) == 'table' then
    local _len = #value
    for _, v in ipairs(ranges) do
      local result
      if matchType and matchType == "prefix" then
        result = string.match(value, "^" .. v .. ".+")
      else
        result = string.match(value, v)
      end
      if result and #result == _len then
        kong.log.notice('v:', v)
        return true
      end
    end
  end
  return false
end

return { match = test }
