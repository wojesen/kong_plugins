local pl_stringx = require "pl.stringx"
local print = print
local tconcat = table.concat
local tinsert = table.insert
local srep = string.rep
local type = type
local pairs = pairs
local tostring = tostring
local next = next

function print_r(root)
    local cache = {  [root] = "." }
    local function _dump(t,space,name)
        local temp = {}
        for k,v in pairs(t) do
            local key = tostring(k)
            if cache[v] then
                tinsert(temp,"+" .. key .. " {" .. cache[v].."}")
            elseif type(v) == "table" then
                local new_key = name .. "." .. key
                cache[v] = new_key
                tinsert(temp,"+" .. key .. _dump(v,space .. (next(t,k) and "|" or " " ).. srep(" ",#key),new_key))
            else
                tinsert(temp,"+" .. key .. " [" .. tostring(v).."]")
            end
        end
        return tconcat(temp,"\n"..space)
    end
    print(_dump(root, "",""))
end
---
--- Generated by Luanalysis
--- Created by wang.jinshan3.
--- DateTime: 2024/1/11 15:38
---
local pghandler = require "kong.plugins.sensitive-word-review.pghandler"
local ngx = ngx

function findSensitiveWords(conf,str)
    --if row and row.value ~= null then
    --  return row.value
    --end
    local initSensitiveWords = ngx.shared.initSensitiveWords
    if initSensitiveWords == nil then
        if conf.useInit and conf.useInit == true then
            local row, err = pghandler.find("init")
            if err then
                return nil, err
            end
            initSensitiveWords = row.value
            ngx.shared.initSensitiveWords = row.value
        else
            initSensitiveWords = ''
            ngx.shared.initSensitiveWords = ''
        end
    end
    local addSensitiveWords = ngx.shared.addSensitiveWords
    if addSensitiveWords == nil then
        ngx.shared.addSensitiveWords = conf.addSensitiveWords
    end
    local ACTrie = ngx.shared.ACTrie
    --print_r({conf.addSensitiveWords})
    --print_r({"99999999999999999999999999"})
    --print_r({ngx.shared.addSensitiveWords})
    --print_r({"555555555555555555555555555"})
    if ACTrie == nil or conf.addSensitiveWords ~= addSensitiveWords then
        ngx.shared.addSensitiveWords = conf.addSensitiveWords
        local words = initSensitiveWords
        if conf.addSensitiveWords and conf.addSensitiveWords ~="" then
            words = words .. "," .. conf.addSensitiveWords
        end
        local block_words_data = {}
        block_words_data = require "kong.plugins.sensitive-word-review.ReadIlleagal".ReadIlleagalWord(words).words
        ACTrie = require "kong.plugins.sensitive-word-review.ACTrie".CreateACTrie()
        --print_r({"zzzzzzzzz555555555555555"})
        --print_r({#block_words_data})
        --print_r({"zzzz66666666666666666"})
        if block_words_data then
            local len = #block_words_data
            for i = 1, len do
                ACTrie:Insert(block_words_data[i], i)
            end
        end
        ACTrie:BuildFail()
        ngx.shared.ACTrie = ACTrie
        --print_r({"zzzz88888888888888888"})
        --local testStr = "我爱  吃饭的事情大概大家都知道，我爱摸鱼的事情我觉得大家也都清楚的 贱人  我草"
        --local acResult,test12 = ACTrie:FilterBlockedWords(testStr)
        --print_r({"qqqqqqqqqqqqqqqqqqqqq555555555555555"})
        --print_r({acResult})
        --print_r({"qqqqqqqqqqqqqqqqqqqqq66666666666666666"})
    end
    local acResult,test12 = ACTrie:FilterBlockedWords(str)
    --print_r({"qqqqqqqqqqqqqqqqqqqqq555555555555555222"})
    --print_r({acResult})
    --print_r({"qqqqqqqqqqqqqqqqqqqqq666666666666666662222"})
    return acResult,test12
end
return {
    findSensitiveWords        = findSensitiveWords,
}
