---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wangjinshan.
--- DateTime: 2020/8/11 10:18
---
local pl_stringx = require "pl.stringx"
local print = print
local tconcat = table.concat
local tinsert = table.insert
local srep = string.rep
local type = type
local pairs = pairs
local tostring = tostring
local next = next

function print_r(root)
  local cache = {  [root] = "." }
  local function _dump(t,space,name)
    local temp = {}
    for k,v in pairs(t) do
      local key = tostring(k)
      if cache[v] then
        tinsert(temp,"+" .. key .. " {" .. cache[v].."}")
      elseif type(v) == "table" then
        local new_key = name .. "." .. key
        cache[v] = new_key
        tinsert(temp,"+" .. key .. _dump(v,space .. (next(t,k) and "|" or " " ).. srep(" ",#key),new_key))
      else
        tinsert(temp,"+" .. key .. " [" .. tostring(v).."]")
      end
    end
    return tconcat(temp,"\n"..space)
  end
  print(_dump(root, "",""))
end


local policies = require "kong.plugins.loadbalance.policies"
local cjson = require "cjson"
local LoadBalanceHandler = {}

LoadBalanceHandler.PRORITY = 899
LoadBalanceHandler.VERSION = "0.0.1"

local function fallback()
  kong.log.notice('fallback');
end

local types = { 'default','weight'};

function LoadBalanceHandler:access(conf)
  local result = nil;
  local policy_loadbalance = nil;
  local loadbalances = {};
  local policy = policies[conf.algorithm];

  if policy then
    result, policy_loadbalance = policy.handler(fallback, conf);
    if policy_loadbalance then
      table.insert(loadbalances, policy_loadbalance);
    end
    kong.log.notice('loadbalance type is ', type, ',handler result:', result)
    if result == 'fallback' or result == 'end' then
      kong.log.notice('loadbalance rule:', cjson.encode(loadbalances), ',loadbalance result:', result)
      return
    end
  end

end

return LoadBalanceHandler;
